tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - indigo_cluster_types: https://baltig.infn.it/infn-cloud/tosca-types/raw/v2.7.0/tosca_types/base/cluster_basic_types.yaml

metadata:
  template_author: INFN-CLOUD
  template_name: kubernetes_types
  template_version: 2.7.0


artifact_types:

  tosca.artifacts.Implementation.YAML:
    derived_from: tosca.artifacts.Implementation
    description: YAML Ansible recipe artifact
    mime_type: text/yaml
    file_ext: [ yaml, yml ]

  tosca.artifacts.AnsibleGalaxy.role:
    derived_from: tosca.artifacts.Root
    description: Ansible Galaxy role to be deployed in the target node


capability_types:

  tosca.capabilities.indigo.LRMS.Kubernetes:
    derived_from: tosca.capabilities.indigo.LRMS
    properties:
      type:
        type: string
        required: true
        default: kubernetes
        constraints:
          - equal: kubernetes


node_types:

  tosca.nodes.DODAS.FrontEnd.Kubernetes:
    derived_from: tosca.nodes.indigo.LRMS.FrontEnd
    metadata:
      icon: /images/kubernetesFE.png
    properties:
      admin_username:
        required: no
        type: string
        default: kubeuser
      admin_token:
        required: no
        type: string
        default: some_insecure_token
      kube_version:
        required: no
        type: string
        default: 1.28.1
      nginx_ingress_helm_version:
        required: no
        type: string
        default: 4.7.2
      cert_manager_type:
        required: no      
        type: string
        default: letsencrypt-prod
        constraints:
          - valid_values: [ 'letsencrypt-prod', 'letsencrypt-staging', 'self-signed' ]
      cert_manager_helm_version:
        required: no
        type: string
        default: v1.12.4
      dashboard_helm_version:
        required: no
        type: string
        default: 6.0.8
      prometheus_helm_version: 
        required: no
        type: string
        default: 24.3.0
      kube_eagle_helm_version:
        required: no
        type: string
        default: 2.0.0
      grafana_helm_version:
        required: no
        type: string
        default:  6.59.4
      kube_deploy_dashboard:
        required: no
        type: string
        default: k8s
      enable_gpu:
        required: no
        type: boolean
        default: false
      domain:
        required: no
        type: string
        default: myip.cloud.infn.it
    artifacts:
      containerd_role:
        file: geerlingguy.containerd,1.3.1
        type: tosca.artifacts.AnsibleGalaxy.role
      kube_role:
        file: git+https://github.com/DODAS-TS/ansible-role-kubernetes,v3.3.1
        type: tosca.artifacts.AnsibleGalaxy.role
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
      openvpn_role:
        file: indigo-dc.openvpn
        type: tosca.artifacts.AnsibleGalaxy.role
    capabilities:
        lrms:
          type: tosca.capabilities.indigo.LRMS.Kubernetes
    interfaces:
      Standard:
        configure:
          implementation: https://baltig.infn.it/infn-cloud/tosca-types/raw/v2.7.0/artifacts/dodas/kube_fe_install.yaml
          inputs:
            kube_front_end_ip: { get_attribute: [ HOST, private_address, 0 ] }
            kube_api_server_public: { get_attribute: [ HOST, public_address, 0 ] }
            fe_hybrid_cluster:  { get_property: [ SELF, hybrid ] }
            kube_admin_username:  { get_property: [ SELF, admin_username ] }
            kube_admin_token:  { get_property: [ SELF, admin_token ] }
            kube_version:  { get_property: [ SELF, kube_version ] }
            kube_deploy_dashboard: { get_property: [ SELF, kube_deploy_dashboard ] }
            cert_manager_type: { get_property: [ SELF, cert_manager_type ] }
            nginx_ingress_helm_version: { get_property: [ SELF, nginx_ingress_helm_version ] }
            cert_manager_helm_version: { get_property: [ SELF, cert_manager_helm_version ] }
            dashboard_helm_version: { get_property: [ SELF, dashboard_helm_version ] }
            prometheus_helm_version: { get_property: [ SELF, prometheus_helm_version ] }
            kube_eagle_helm_version: { get_property: [ SELF, kube_eagle_helm_version ] } 
            grafana_helm_version: { get_property: [ SELF, grafana_helm_version ] }
            enable_gpu: { get_property: [ SELF, enable_gpu ] }
            domain: { get_property: [ SELF, domain ] }


  tosca.nodes.DODAS.WorkerNode.Kubernetes:
    derived_from: tosca.nodes.indigo.LRMS.WorkerNode
    metadata:
      icon: /images/kubernetesWN.png
    properties:
      admin_username:
        required: no
        type: string
        default: kubeuser
      admin_token:
        required: no
        type: string
        default: some_insecure_token
      kubelet_extra_args:
        required: no
        type: string
        default: ""
      kube_version:
        required: no
        type: string
        default: 1.28.1
      nodelabel:
        type: string
        required: no
        default: "testme=true"
      enable_gpu:
        required: no
        type: boolean
        default: false
      gpu_model:
        required: no
        type: string
        description: GPU model
        default: ""
    artifacts:
      containerd_role:
        file: geerlingguy.containerd,1.3.1
        type: tosca.artifacts.AnsibleGalaxy.role
      kube_role:
        file: git+https://github.com/DODAS-TS/ansible-role-kubernetes,v3.3.1
        type: tosca.artifacts.AnsibleGalaxy.role
      nfs_role:
        file: indigo-dc.nfs
        type: tosca.artifacts.AnsibleGalaxy.role
      openvpn_role:
        file: indigo-dc.openvpn
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://baltig.infn.it/infn-cloud/tosca-types/raw/v2.7.0/artifacts/dodas/kube_wn_install.yaml
          inputs:
            kube_front_end_ip: { get_property: [ SELF, front_end_ip ] }
            wn_hybrid_cluster:  { get_property: [ SELF, hybrid] }
            kubelet_extra_args: { get_property: [ SELF, kubelet_extra_args] }
            kube_version:  { get_property: [ SELF, kube_version] }
            kube_admin_username:  { get_property: [ SELF, admin_username] }
            kube_admin_token:  { get_property: [ SELF, admin_token] }
            nodelabel: { get_property: [ SELF, nodelabel] }
            enable_gpu: { get_property: [ SELF, enable_gpu ] }
            gpu_model: { get_property: [ SELF, gpu_model ] }

  tosca.nodes.DODAS.HelmInstall:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      name:
        type: string
        description: name of the helm deployment
        required: yes
      chart:
        type: string
        description: chart name
        required: yes
      repos:
        type: list
        entry_schema:
          type: map
          entry_schema:
            type: string
      values_file:
        type: string
        description: values.yaml file content
        required: no
        default: ""
      values_url:
        type: string
        description: values.yaml file url
        required: no
        default: ""
      kubeconfig_path:
        type: string
        required: no
        default: /etc/kubernetes/admin.conf
      inline_options:
        type: string
        required: no
        default: ""
      helm_version:
        type: string
        required: no
        default: "v3"
      role_name:
        type: string
        required: no
        default: DODAS-TS.helm
    artifacts:
      helm_config_role:
        file: DODAS-TS.helm,v2.0.0-rc5
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        start:
          implementation: https://baltig.infn.it/infn-cloud/tosca-types/raw/v2.7.0/artifacts/dodas/ansible.yaml
          inputs:
            role_name:  { get_property: [ SELF, role_name ] }
            name: { get_property: [ SELF, name ] }
            chart: { get_property: [ SELF, chart ] }
            values_file: { get_property: [ SELF, values_file ] }
            values_url: { get_property: [ SELF, values_url ] }
            inline_options: { get_property: [ SELF, inline_options ] }
            kubeconfig_path: { get_property: [ SELF, kubeconfig_path ] }
            helm_version: { get_property: [ SELF, helm_version ] }
            repos: { get_property: [ SELF, repos ] }

  tosca.nodes.DODAS.Kubernetes.LongHorn:
    derived_from: tosca.nodes.DODAS.HelmInstall
    properties:
      is_enabled:
        type: boolean
        default: false
    interfaces:
      Standard:
        start:
          implementation: https://baltig.infn.it/infn-cloud/tosca-types/raw/v2.7.0/artifacts/dodas/kube_longhorn.yaml
          inputs:
            is_enabled: { get_property: [ SELF, is_enabled ] }
            role_name: { get_property: [ SELF, role_name ] }
            name: { get_property: [ SELF, name ] }
            chart: { get_property: [ SELF, chart ] }
            values_file: { get_property: [ SELF, values_file ] }
            values_url: { get_property: [ SELF, values_url ] }
            inline_options: { get_property: [ SELF, inline_options ] }
            kubeconfig_path: { get_property: [ SELF, kubeconfig_path ] }
            helm_version: { get_property: [ SELF, helm_version ] }
            repos: { get_property: [ SELF, repos ] }

  tosca.nodes.DODAS.Kubernetes.Kafka:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      is_enabled:
        type: boolean
        default: false
      kafka_helm_version:
        type: string
        default: v1.0.0
      kafka_enabled:
        type: boolean
        default: false
      kafka_replicas:
        type: integer
        default: 1
      kafka_enable_public_connections:
        type: boolean
        default: false
      kafka_public_port:
        type: integer
        default: 30092
      kafka_admin_user:
        type: string
        default: admin
      kafka_admin_password:
        type: string
        default: pass
      kafka_volume_longhorn_admin_user:
        type: string
        default: admin
      kafka_volume_longhorn_admin_password:
        type: string
        default: pass
      kafka_kraft_enabled:
        type: boolean
        default: false
      kafka_kraft_replicas:
        type: integer
        default: 1
      kafka_kraft_enable_public_connections:
        type: boolean
        default: false
      kafka_kraft_public_port:
        type: integer
        default: 31093
      zookeeper_enabled:
        type: boolean
        default: false        
      zookeeper_replicas:
        type: integer
        default: 1
      zookeeper_enable_public_connections:
        type: boolean
        default: false
      zookeeper_public_port:
        type: integer
        default: 32181
      kafka_ui_enabled:
        type: boolean
        default: true
      kafka_ui_admin_user:
        type: string
        default: admin
      kafka_ui_admin_password:
        type: string
        default: pass
      kube_type_of_node:
        type: string
        required: true
        constraints:
          - valid_values: [ 'front', 'wn' ]
      kube_front_end_ip:
        type: string
        required: true          
        description: IP of the Front-End node
      kubeconfig_path:
        type: string
        required: no
        default: /etc/kubernetes/admin.conf
      domain:
        required: no
        type: string
        default: myip.cloud.infn.it
      cert_manager_type:
        required: no      
        type: string
        default: letsencrypt-prod
        constraints:
          - valid_values: [ 'letsencrypt-prod', 'letsencrypt-staging', 'self-signed' ]        
    artifacts:
      kafka_role:
        file: git+https://baltig.infn.it/infn-cloud/ansible-role-kafka,v1.0.0
        type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        start:
          implementation: https://baltig.infn.it/infn-cloud/tosca-types/raw/v2.7.0/artifacts/dodas/kube_kafka.yaml
          inputs:
            is_enabled: { get_property: [ SELF, is_enabled ] }
            kafka_helm_version: { get_property: [ SELF, kafka_helm_version ] }
            kafka_enabled: { get_property: [ SELF, kafka_enabled ] }
            kafka_replicas: { get_property: [ SELF, kafka_replicas ] }
            kafka_enable_public_connections: { get_property: [ SELF, kafka_enable_public_connections ] }
            kafka_public_port: { get_property: [ SELF, kafka_public_port ] }
            kafka_admin_user: { get_property: [ SELF, kafka_admin_user ] }
            kafka_admin_password: { get_property: [ SELF, kafka_admin_password ] }
            kafka_volume_longhorn_admin_user: { get_property: [ SELF, kafka_volume_longhorn_admin_user ] }
            kafka_volume_longhorn_admin_password: { get_property: [ SELF, kafka_volume_longhorn_admin_password ] }
            kafka_kraft_enabled: { get_property: [ SELF, kafka_kraft_enabled ] }
            kafka_kraft_replicas: { get_property: [ SELF, kafka_kraft_replicas ] }
            kafka_kraft_enable_public_connections: { get_property: [ SELF, kafka_kraft_enable_public_connections ] }
            kafka_kraft_public_port: { get_property: [ SELF, kafka_kraft_public_port ] }
            zookeeper_enabled: { get_property: [ SELF, zookeeper_enabled ] }
            zookeeper_replicas: { get_property: [ SELF, zookeeper_replicas ] }
            zookeeper_enable_public_connections: { get_property: [ SELF, zookeeper_enable_public_connections ] }
            zookeeper_public_port: { get_property: [ SELF, zookeeper_public_port ] }
            kafka_ui_enabled: { get_property: [ SELF, kafka_ui_enabled ] }
            kafka_ui_admin_user: { get_property: [ SELF, kafka_ui_admin_user ] }
            kafka_ui_admin_password: { get_property: [ SELF, kafka_ui_admin_password ] }
            kube_type_of_node: { get_property: [ SELF, kube_type_of_node ] }
            kube_front_end_ip: { get_property: [ SELF, kube_front_end_ip ] }
            kubeconfig_path: { get_property: [ SELF, kubeconfig_path ] }
            domain: { get_property: [ SELF, domain ] }
            cert_manager_type: { get_property: [ SELF, cert_manager_type ] }
